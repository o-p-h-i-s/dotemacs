#+STARTUP: content
* Emacsの設定
** early-init.el
*** Emacsの余計な枠を取る
#+begin_src emacs-lisp :tangle early-init.el
  (push '(undecorated . t) default-frame-alist)
#+end_src
*** Emacsの画面を広くする
#+begin_src emacs-lisp :tangle early-init.el
  (setq inhibit-startup-message t)
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
#+end_src
*** Emacsの初期位置、サイズ
#+begin_src emacs-lisp :tangle early-init.el
  (push '(top . 1) default-frame-alist)
  (push '(left . 0) default-frame-alist)
  (push '(width . 105) default-frame-alist)
  (push '(height . 54) default-frame-alist)
#+end_src
*** (comp)warningの抑制
#+begin_src emacs-lisp :tangle early-init.el
  (custom-set-variables '(warning-suppress-types '((comp))))
#+end_src
*** early-init.el ends here
#+begin_src emacs-lisp :tangle early-init.el
  (provide 'early-init)
#+end_src
** init.el
パッケージはleaf.elを用いて管理する。
README.orgからMakefileでinit.elとearly-init.elを作成してコンパイルする。
#⁠+begin_src から #+end_src まで囲まれた範囲がinit.el,early-init.elにtangle(抜き出)される。
*** Leaf
#+begin_src emacs-lisp :tangle init.el
  (eval-and-compile
    (when (or load-file-name byte-compile-current-file)
      (setq user-emacs-directory
	    (expand-file-name
	     (file-name-directory (or load-file-name byte-compile-current-file))))))
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("org"   . "https://orgmode.org/elpa/")
			 ("melpa" . "https://melpa.org/packages/")
			 ("gnu"   . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (unless (package-installed-p 'leaf)
      (package-refresh-contents)
      (package-install 'leaf)))
#+end_src
*** Org
#+begin_src emacs-lisp :tangle init.el
  (leaf org
    :require t
    :defvar org-structure-template-alist
    :custom
    (org-src-window-setup . 'current-window)
    :config
    (set-face-attribute 'org-table nil :family "Cascadia Next JP" :height 120)
    (add-to-list 'org-structure-template-alist '("i" . "src emacs-lisp :tangle init.el"))
    (add-to-list 'org-structure-template-alist '("I" . "src emacs-lisp :tangle early-init.el")))
#+end_src
*** magit
#+begin_src emacs-lisp :tangle init.el
  (leaf magit :ensure t)
#+end_src
*** ddskk
#+begin_src emacs-lisp :tangle init.el
  (leaf ddskk
    :ensure t
    :bind
    (("C-x C-y" . skk-mode)
     ("C-x y" . skk-auto-fill-mode))
    :custom
    (;; skk directory
     (skk-user-directory . "~/ddskk")
     ;; skk dict
     (skk-large-jisyo . "/usr/share/skk/SKK-JISYO.L")
     ;; skk tutorial
     (skk-tut-file . "/usr/share/skk/SKK.tut")
     ;; using skk with input method
     (default-input-method . "japanese-skk")))
#+end_src
*** free-keys
#+begin_src emacs-lisp :tangle init.el
  (leaf free-keys :ensure t)
#+end_src
*** custom-set-*を捨てる
#+begin_src emacs-lisp :tangle init.el
  (leaf cus-edit
    :doc "tools for customizing Emacs and Lisp packages"
    :tag "builtin" "faces" "help"
    :custom `((custom-file . ,(locate-user-emacs-file "custom.el"))))
#+end_src
*** 自動作成されるファイル群
| 種類                | 例           | 要否    |
|--------------------+-------------+--------|
| バックアップファイル  | hoge~       | 作らない |
| 自動保存ファイル      | #hoge#      | 作る    |
| 自動保存リストファイル | .saves-hoge | 作らない |
| ロックファイル       | .#hoge      | 作らない |
#+begin_src emacs-lisp :tangle init.el
  (leaf auto-generate-files
    :custom
    `(;; 編集前のファイルをバックアップとして残さない
      (make-backup-files . nil)
      ;; 自動保存リストファイルを生成しない
      (auto-save-list-file-prefix . nil)
      ;; ロックファイルを生成しない
      (create-lockfiles . nil)))
#+end_src
*** Emacsの見た目の設定
| key | 関数                  |
|-----+----------------------|
| C-h | delete-backward-char |
| C-? | help-for-help        |
#+begin_src emacs-lisp :tangle init.el
  (leaf cus-face
    :init
    ;; テーマの設定
    (load-theme 'wombat t)
    :custom
    `(;; 起動メッセージを表示しない
      (inhibit-startup-message . t)
      ;; フォントの設定
      (set-language-environment . "English")
      ;; ステータスライン
      (column-number-mode . t)
      ;; 括弧の補完
      (electric-pair-mode . t)
      ;; ヘルプウィンドウに自動でフォーカス
      (help-window-select . t)
      ;; 番号のズレを抑制
      (display-line-numbers-width-start . t)
      ;; auto-fill-width
      (fill-column . 100))
    ;; キーバインド
    :config
    (define-key key-translation-map [?\C-h] [?\C-?])
    (global-set-key (kbd "C-?") 'help-for-help)
    (set-face-attribute 'default nil :family "CaskaydiaCove NFM" :height 120)
    :global-minor-mode
    ;; 行番号の表示
    (global-display-line-numbers-mode)
    :hook
    ;; text-modeでauto-fillする
    (text-mode-hook . turn-on-auto-fill))
#+end_src
*** 自作関数
.emacs.d内でmakeしてinit.elcを読み込む関数
#+begin_src emacs-lisp :tangle init.el
  (leaf user-defined-function
    :config
    (defun update-init-file()
    (interactive)
    (let ((default-directory "~/.emacs.d"))
      (compile "make")
      (load "~/.emacs.d/init.elc")
      (unless (null (get-buffer "*compilation*"))
	(other-window 1)))))
#+end_src
*** init.el ends here
#+begin_src emacs-lisp :tangle init.el
  (provide 'init)
#+end_src
